# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

name: Build

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      configuration:
        required: true
        type: string
      option:
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{inputs.platform}}
    env:
      BUILD_TYPE: ${{inputs.configuration}}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
      with:
        egress-policy: audit

    - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      with:
        submodules: 'recursive'

    - name: Install prerequisites - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt-get install -y \
         gcc-multilib \
         lcov \
         pkg-config \
         libelf-dev \

    - name: Clone and build libbpf - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        git clone https://github.com/libbpf/libbpf.git
        cd libbpf
        git checkout v0.7.0
        cd src
        make
        sudo LIBDIR=/lib/x86_64-linux-gnu make install
        sudo ldconfig

    - name: Download the ebpf-for-windows build nuget package
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
      with:
        name: "ebpf-for-windows - NuGet package (none_Release)"
        path: ${{github.workspace}}/local_packages

    - name: Configure CMake - Windows-2019 or Windows-2022
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBPF_PERF_LOCAL_NUGET_PATH=${{github.workspace}}/local_packages

    - name: Configure CMake - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        if [ "${{inputs.option}}" = "sanitizer" ]; then
          export SANITIZER_FLAGS="-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ "${{inputs.option}}" = "coverage" ]; then
          export COVERAGE_FLAGS="-DCMAKE_CXX_FLAGS=\"--coverage\" -DCMAKE_C_FLAGS=\"--coverage\""
        fi
        cmake \
          -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="${SANITIZER_FLAGS}" \
          -DCMAKE_C_FLAGS="${SANITIZER_FLAGS}" \
          ${COVERAGE_FLAGS}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
      with:
        name: build-${{env.BUILD_TYPE}}-${{inputs.platform}}-${{inputs.option}}
        path: ${{github.workspace}}/build/bin

    - name: Self-Tests
      if: inputs.platform == 'ubuntu-22.04'
      working-directory: ${{github.workspace}}/build/bin
      run: |
        cmake --build ${{github.workspace}}/build --target test --

    - name: Generate code coverage report
      if: inputs.option == 'coverage'
      run: |
        mkdir -p coverage
        lcov --capture --directory build --include '${{github.workspace}}/*' --output-file coverage/lcov.info --exclude '${{github.workspace}}/external/*' --exclude '${{github.workspace}}/build/*'

    - name: Coveralls Parallel
      if: inputs.option == 'coverage'
      uses: coverallsapp/github-action@43f11c4e058174f808ee9cd63701b6c42fe3f5e3 # v2.3.2
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: run-${{inputs.build_type}}-${{inputs.platform}}-${{inputs.arch}}
        parallel: true
