# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

name: Build

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      configuration:
        required: true
        type: string
      option:
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{inputs.platform}}
    env:
      BUILD_TYPE: ${{inputs.configuration}}

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
      with:
        egress-policy: audit

    - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      with:
        submodules: 'recursive'

    - name: Install prerequisites - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt-get install -y \
         gcc-multilib \
         lcov \
         pkg-config \
         libelf-dev \

    - name: Clone and build libbpf - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        git clone https://github.com/libbpf/libbpf.git
        cd libbpf
        git checkout v0.7.0
        cd src
        make
        sudo LIBDIR=/lib/x86_64-linux-gnu make install
        sudo ldconfig

    - name: Get the latest run ID from Microsoft/ebpf-for-windows main branch - Windows-2019 or Windows-2022
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        mkdir ${{github.workspace}}/local_packages
        $token = ConvertTo-SecureString -String ${{secrets.github_token}} -AsPlainText -Force
        $workflow = ((Invoke-WebRequest -Uri  "https://api.github.com/repos/microsoft/ebpf-for-windows/actions/runs?per_page=1&exclude_pull_requests=true&branch=main&status=completed&event=schedule" -Token $token).Content | ConvertFrom-Json).workflow_runs[0]
        $runId = $workflow.id
        $commitSha = $workflow.head_sha
        echo "RUNID=$runId" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "COMMIT_SHA=$commitSha" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Get Linux Kernel version
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        echo "COMMIT_SHA=$(uname -r)" >> $env:GITHUB_ENV

    - name: Cache downloaded artifacts
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ${{github.workspace}}/local_packages
        key: ${{inputs.platform}}-${{inputs.configuration}}-ebpf-for-windows-run-id-${{env.RUNID}}

    - name: Download daily nuget package and MSI installer - Windows-2019 or Windows-2022
      env:
        GH_TOKEN: ${{ github.token }}
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        $token = ConvertTo-SecureString -String ${{secrets.github_token}} -AsPlainText -Force
        $artifacts = @()
        $artifacts += 'ebpf-for-windows - NuGet package (Build-x64_Release)'
        $artifacts += 'ebpf-for-windows - MSI installer (Build-x64_Release)'
        scripts\Fetch-LatestArtifacts.ps1 -ArtifactsToDownload $artifacts -OutputPath ${{github.workspace}}/local_packages -RunId ${{env.RUNID}} -GitHubToken $token

    - name: Configure CMake - Windows-2019 or Windows-2022
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBPF_PERF_LOCAL_NUGET_PATH=${{github.workspace}}/local_packages -DBPF_PERF_LOCAL_MSI_PATH=${{github.workspace}}/local_packages

    - name: Configure CMake - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        if [ "${{inputs.option}}" = "sanitizer" ]; then
          export SANITIZER_FLAGS="-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ "${{inputs.option}}" = "coverage" ]; then
          export COVERAGE_FLAGS="-DCMAKE_CXX_FLAGS=\"--coverage\" -DCMAKE_C_FLAGS=\"--coverage\""
        fi
        cmake \
          -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="${SANITIZER_FLAGS}" \
          -DCMAKE_C_FLAGS="${SANITIZER_FLAGS}" \
          ${COVERAGE_FLAGS}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload artifacts
      uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
      with:
        name: build-${{env.BUILD_TYPE}}-${{inputs.platform}}
        path: ${{github.workspace}}/build/bin

    - name: Setup xdp directory
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        mkdir -p ${{github.workspace}}\xdp

    - name: Download xdp-for-windows
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      working-directory: ${{ github.workspace }}\xdp
      run: |
        $ProgressPreference = 'SilentlyContinue'
        $packageBaseUrl = Get-Content -Path "${{github.workspace}}/scripts/xdp_version.txt"
        $packageUrl = $packageBaseUrl + "/xdp-for-windows.1.1.0.msi"
        write-output "Downloading $packageUrl"
        Invoke-WebRequest -Uri $packageUrl -OutFile xdp-for-windows.1.1.0.msi
        dir *.msi
        $packageUrl = $packageBaseUrl + "/xdp-devkit-x64-1.1.0.zip"
        write-output "Downloading $packageUrl"
        Invoke-WebRequest -Uri $packageUrl -OutFile xdp-devkit-x64-1.1.0.zip
        dir *.zip
        Expand-Archive -Path "xdp-devkit-x64-1.1.0.zip" -DestinationPath .

    - name: Install xdp-for-windows
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      working-directory: ${{ github.workspace }}\xdp
      run: |
          $installPath = "${{ github.workspace }}\xdp"
          Write-Output "xdp installPath: $installPath"
          Write-Output "Installing XDP for Windows"
          CertUtil.exe -addstore Root bin\CoreNetSignRoot.cer
          CertUtil.exe -addstore TrustedPublisher bin\CoreNetSignRoot.cer
          $process = Start-Process msiexec.exe -Wait -ArgumentList "/i xdp-for-windows.1.1.0.msi INSTALLFOLDER=$installPath /qn" -PassThru
          if ($process.ExitCode -ne 0) { exit $process.ExitCode }
          Write-Output "XDP for Windows installed"
          sc.exe query xdp
          reg.exe add HKLM\SYSTEM\CurrentControlSet\Services\xdp\Parameters /v XdpEbpfEnabled /d 1 /t REG_DWORD /f
          sc.exe stop xdp
          sc.exe start xdp

    - name: Create results directory
      run: |
        mkdir -p ${{github.workspace}}/results

    - name: Create commit_sha.txt - Windows-2019 or Windows-2022
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run:
        echo ${{env.COMMIT_SHA}} | Out-File -FilePath ${{github.workspace}}/results/commit_sha.txt -Encoding utf8 -Append

    - name: Create commit_sha.txt - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        echo ${{env.COMMIT_SHA}} >> ${{github.workspace}}/results/commit_sha.txt

    - name: Tests - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04' && inputs.option == 'none'
      working-directory: ${{github.workspace}}/build/bin
      run: |
        sudo ./bpf_performance_runner -i tests.yml -r | tee ${{github.workspace}}/results/jit-${{inputs.platform}}-${{env.BUILD_TYPE}}.csv
        exit ${PIPESTATUS[0]}

    - name: Install prerequisites - Windows-2019 or Windows-2022
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      working-directory: ${{github.workspace}}/local_packages
      run: |
        Start-Process msiexec.exe -Wait -ArgumentList '/i ebpf-for-windows.msi /quiet /qn /norestart /log install.log ADDLOCAL=ALL'
        echo "C:\Program Files\ebpf-for-windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Tests - Windows 2019 or Windows 2022 - Native
      if: (inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022') && inputs.option == 'none'
      working-directory: ${{github.workspace}}/build/bin
      run: |
        ${{env.BUILD_TYPE}}\bpf_performance_runner.exe -i tests.yml -e .sys -r | Tee-Object -FilePath ${{github.workspace}}/results/native-${inputs.platform}-${{env.BUILD_TYPE}}.csv

    - name: Tests - Windows 2019 or Windows 2022 - JIT
      if: (inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022') && inputs.option == 'jit'
      working-directory: ${{github.workspace}}/build/bin
      # Run with option to ignore failing return code
      run: |
        ${{env.BUILD_TYPE}}\bpf_performance_runner.exe -i tests.yml -r | Tee-Object -FilePath ${{github.workspace}}/results/native-${inputs.platform}-${{env.BUILD_TYPE}}.csv

    - name: Upload results
      uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
      with:
        name: results-${{env.BUILD_TYPE}}-${{inputs.platform}}-${{inputs.option}}
        path: |
          ${{github.workspace}}/results/*.csv
          ${{github.workspace}}/results/commit_sha.txt

    - name: Upload profile
      uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # v4.3.2
      with:
        name: profile-${{env.BUILD_TYPE}}-${{inputs.platform}}-${{inputs.option}}
        path: |
          ${{github.workspace}}/results/*.etl

    - name: Self-Tests
      if: inputs.platform == 'ubuntu-22.04'
      working-directory: ${{github.workspace}}/build/bin
      run: |
        cmake --build ${{github.workspace}}/build --target test --

    - name: Generate code coverage report
      if: inputs.option == 'coverage'
      run: |
        mkdir -p coverage
        lcov --capture --directory build --include '${{github.workspace}}/*' --output-file coverage/lcov.info --exclude '${{github.workspace}}/external/*' --exclude '${{github.workspace}}/build/*'

    - name: Coveralls Parallel
      if: inputs.option == 'coverage'
      uses: coverallsapp/github-action@3dfc5567390f6fa9267c0ee9c251e4c8c3f18949 # v2.2.3
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: run-${{inputs.build_type}}-${{inputs.platform}}-${{inputs.arch}}
        parallel: true
